• Identificar Requerimientos:

- Requerimientos Funcionales:
    - Se debe poder conocer el precio de venta de una prenda.
    - Se debe poder conocer el tipo de una prenda.
    - Se debe poder conocer las ganancias de un determinado día.
    
- Requerimientos No Funcionales:-
  
    
• Presentar una solución usando el paradigma de objetos (pseudocódigo, diagrama de clases).

class Prenda {

    var precioBase
    var estadoPrenda
    var tipoPrenda
 
    method precio(){
      return  estadoPrenda.calcularPrecio(precioBase);
      }
 }
 
 
object nueva {

    method calcularPrecio(precioBase){
      return precioPropio;
      }
      
 }
 
 
 class Promocion {
 
    var valorPromocion
 
    method asignarValorPromocion(valor){
      valorPromocion = valor;
      }
      
    method calcularPrecio(precioBase){
      return precioPropio - valorPromocion;
      }
      
 }
 
 
 object liquidacion {
 
    method calcularPrecio(precioBase){
      return precioBase/2;
      }
       
      
 }
 

Class Venta {

    var prendasVendidas = []
    var cantidadPrendasVendidas
    var fechaDeRealizacion
    var metodoDePago
    
    method calcularGanancias(){
     return metodoDePago.calcularGanancias(prendas.sum({prenda => prenda.precio()}));
    }
    
  }
  
  
  object efectivo {
    
    method calcularGanancias(unValor){
      return unValor;
      }
  }
  
  
  Class Tarjeta {
  
    var cantidadCuotas
    var coeficienteFijo
    
    method calcularGanancias(unValor){
      return unValor + (cantidadCuotas * coeficienteFijo + (unValor * 0,01));
      }
      
 }
 
 
• Explicar todo lo que considere necesario en prosa:

  - Los estados de prenda "nueva" y "liquidacion" son siempre iguales, por eso son objects y no clases lo mismo con el método de pago "efectivo".
  - Se utilizó polimorfismo para calcular los precios segun el estado de cada prenda y tambien para calcular parte de las ganancias de una venta según
    su método de pago, de forma que se asignen correctamente las responsabilidades.
  - Considero que la "fechaDeRealizacion" de una venta podria eliminarse, no se especifíca como requerimiento y no es de utilidad para ninguno de los mismos.
  
• Si se descarta alguna alternativa durante el desarrollo de la solución, o si se tiene otra solución, explicarla brevemente:
  
  - En una primera instancia consideré que cada prenda calcule su precio sin delegarle el calculo a su estado y que cada estado tenga un valorDeModificacion, Ej:
  
    Class Prenda {
    
      method precio(){
        return precioBase * estado.modificador();
        }
    }
    
    Descarté esta opción porque algunos algunos objetos como "nueva" y "liquidacion" quedarian vacios y solo devolverian un atributo, de la forma implementada tienen
    (aunque escazo) comportamiento.
    Algo similar sucederia con el método de pago "efectivo" solo que al tener "Tarjeta" un poco mas de comportamiento fue una decisión mas sencilla.
    
  - Tambien descarté (por obvias razones cualquier solución que no utilizara el polimorfismo como por ejemplo tratar a los estados de una prenda o el método de
    pago en una venta como booleanos y preguntar si es de un estado u otro para tomar un curso de acción.

 
